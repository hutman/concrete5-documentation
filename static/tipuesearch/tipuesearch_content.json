{"pages":[{"title":"Hutman Concrete5 Documentation","text":"Hutman Documentation","tags":"","url":"index.html"},{"title":"Developers Guide","text":"","tags":"","url":"Developers_Guide.html"},{"title":"Overview","text":"Concepts Blocks Blocks are the smallest presentational unit in concrete5. They are meant to be added to a page, and to consist primarily of visible content. Each time a block is added to a page, a new Block object is created. This same block object may be aliased to different pages and versions of pages. Block Types Each block has a BlockType object associated with it, which tells the system what type of data it stores. Each block must be of a certain type (e.g. \u201cslideshow,\u201d \u201ccontent,\u201d \u201cpage list,\u201d etc\u2026) Block Instance-Specific Data A combination of these two types of data gives us the block\u2019s instance-specific data. This is information about the particular instance of the block that is only relevant to the block\u2019s type. For example, if you\u2019re dealing with the Youtube video block, it\u2019s instance-specific data is the address of the video you want to display, and its name. Basically, any information displayed a block\u2019s add or edit interface is its instance-specific data. Code Locations All of the necessary block files are contained within one directory, located in one of several places concrete\/blocks\/ packages\/some_package\/blocks\/ application\/blocks\/ The name of the directory that stores the code files in these locations must match that of the block type handle. Overrides Any file in the first two locations above can be overridden by the same file in the third location. This lets sites override presentational and controller logic for custom applications and display, without forking core code bases or packages acquired from the marketplace.","tags":"","url":"Blocks\/Overview.html"},{"title":"Directory Setup","text":"A block's directory can contain the following items. A Database Definition db.xml This is a file named db.xml, in the Doctrine XML Format. This file describes the schema of the block in a way that can be easily read and understood. The schema can also be altered later and refreshed through the dashboard or a package update if the block is installed using a package. Multiple tables can contained within this file. The only requirement for the table is that the core block type table must contain a column named bID, which is an unsigned integer. An Icon icon.png A block's icon is displayed in the Add Block window. This is a 50x50 PNG named &quot;icon.png&quot;. Controller controller.php This file extends the BlockController object. You can learn more about this file in the Controller section of the Blocks Documentation Core Templates add.php This file is rendered when the block is added. edit.php This file is rendered when the block is edited. view.php This file is rendered when the block is viewed in a page. composer.php (optional) An optional file that is rendered when the block is displayed within the composer view. Stylesheet view.css Block specific styles, will be included on every page that this block is added to.","tags":"","url":"Blocks\/Directory_Setup.html"},{"title":"Controller","text":"A block's controller can contain the following properties and methods. Properties $btTable (required) This is the core block type table that you are saving data into. $btExportTables If your block uses more than one table. This is an array of tables that are connected to this block, this is used for the duplicate function. $btInterfaceWidth (default 400) $btInterfaceHeight (default 400) These variables define, in pixels, the width and height of your block's window when added or edited. $btSupportsInlineAdd (default false) $btSupportsInlineEdit (default false) These variables can be set to true if this block supports inline add\/edit functionality (like the Content block). $btDefaultSet This variable can be set to defind the Block Set this Block Type should display in. If none is defined it will display in the &quot;Other&quot; Set. $btCacheBlockRecord (default true) Allow the block record to be cached. $btCacheBlockOutput (default false) Allow the block output to be cached. $btCacheBlockOutputLifetime (default 0) Time, in minutes, to cache the block's output. $btCacheBlockOutputOnPost (default false) Allow the block output to be cached after post. $btCacheBlockOutputForRegisteredUsers Allow the block output to be cached for Registered Users. $btIgnorePageThemeGridFrameworkContainer (default false) Define if this block should always ignore the area's grid framework container. $helpers (default ['form']) If your block needs helpers, this is an array of helpers to be included. $supportSavingNullValues (default false) Set this to true if the data sent to the save\/performSave methods can contain NULL values that should be persisted. Methods getBlockTypeName() Returns the name of the block's type. getBlockTypeDescription() Returns the description of the block type. on_start() Fires automatically when a block is interacted with. If you're thinking of putting something in the block's &quot;__construct()&quot; method, use this instead. It is run only when necessary and is less likely to be a performance drain. on_page_view() This function is automatically run when the block is viewed from within a page. add() This function is automatically run when the block is placed in add mode. edit() This function is automatically run when the block is edited. validate() This function is automatically run when the block is submitted to be saved and can return validation errors if needed. save($args) $args is an associated array, and is usually filled with the contents of the $_POST array (when either added or saved.) The BlockController save() method will actually rarely need to be overridden, as it inspects the columns of the block's core database table and looks through the $_POST to find matching columns, and saves data automatically. registerViewAssets($outputContent = '') This function is automatically run when the block is viewed and can be used to include assets for the view. view() This function is automatically run when the block is viewed. set($key, $value) Takes a string $key and a mixed $value, and makes a variable of that name available from within a block's view, add or edit template. This is typically used within the add(), edit() or view() function. render($view) Renders a view that's in the block's folder. Does not require .php on the end of the filename. duplicate($newBlockID) Run automatically when a block is duplicated. This most likely happens when a block that is in an approved version is updated. A block controller may override this function to provide specific duplicate-only functionality. delete() Automatically run when a block is deleted. This removes the special data from the block's specific database table. If a block needs to do more than this this method should be overridden.","tags":"","url":"Blocks\/Controller.html"},{"title":"Block Types","text":"From time to time you may find yourself access a BlockType object. Here are the various methods available from that object. Load a Block Type Object $blockType = \\Concrete\\Core\\Block\\BlockType::getByID($id) $blockType = \\Concrete\\Core\\Block\\BlockType::getByHandle($blockTypeHandle) Returns a BlockType object given a passed block type ID or handle. Methods \\Concrete\\Core\\Block\\BlockType::installBlockType($btHandle, $pkg) Installs a block type from a particular package. Useful in a package's install() method. $blockType-&gt;isCoreBlockType() Returns true if the block type ships with concrete5. $blockType-&gt;getPackageID() Returns the package ID of the block type, or zero if the block type ships with concrete5 or is custom. $blockType-&gt;getPackageHandle() Returns the package handle of the block type, or null if the block type ships with concrete5 or is custom. $blockType-&gt;getCount() Returns the number of unique instances of this block type. $blockType-&gt;getBlockTypeDescription() Returns the description of the block type. $blockType-&gt;getBlockTypeInterfaceWidth() Returns the width that the block thinks it needs to be, when adding or editing. $blockType-&gt; getBlockTypeInterfaceHeight() Returns the height that the block thinks it needs to be, when adding or editing. $blockType-&gt;getBlockTypeCustomTemplates() Returns an array of custom templates. Checks the core block type directory, the local overrides directory, and any packages to see if they specify custom templates for this block type. $controller = $blockType-&gt;getController() Returns the extended BlockController for the particular BlockType object. $blockType-&gt;getBlockTypePath() Returns a path to where the block type's files are located. $blockType-&gt;inc($file, $args = array()) Extracts all items passed through $args, and then includes the file from either the local directory or the core directory. $blockType-&gt;delete() Deletes the block type. Only removes the block type from the BlockTypes table, not any of the information in the other tables. $blockType-&gt;refresh() Refreshes the block type's database schema (stored in db.xml). $blockType-&gt;render($view) Renders a particular view of a block type, using the public $controller variable as the block type's controller Embedding Blocks in a Page Template There are times when you might want to use a block's functionality within a page without having that block editable through the CMS. You can render a block with parameters as though it were added through the CMS by coding it directly into a page template. Example 1: Hard-Coding Tags Block $bt = \\Concrete\\Core\\Block\\BlockType::getByHandle('tags'); $c = \\Concrete\\Core\\Page\\Page::getByID('\/path\/to\/target\/page'); $bt-&gt;controller-&gt;set('title', t('Tags')); $bt-&gt;controller-&gt;set('target', $c); $bt-&gt;render(); Example 2: Hard-Coding Auto-Nav Block with Custom Template Render a breadcrumb navigation using the Auto-Nav block with certain options, and the built-in Breadcrumb Auto-Nav custom tempate. $bt = \\Concrete\\Core\\Block\\BlockType::getByHandle('autonav'); $bt-&gt;controller-&gt;orderBy = 'display_asc'; $bt-&gt;controller-&gt;displayPages = 'top'; $bt-&gt;controller-&gt;displaySubPages = 'relevant_breadcrumb'; $bt-&gt;controller-&gt;displaySubPageLevels = 'all'; $bt-&gt;render('templates\/breadcrumb');","tags":"","url":"Blocks\/Block_Types.html"},{"title":"Standard Widgets","text":"concrete5's form helper makes it easy to add form widgets to your single pages and custom blocks, and several advantages to writing full HTML tags. Data persistence on POST: when submitting the core form helpers, their data will remain as originally entered, without having to worry about checking $_REQUEST variables. This is even the case for more complex form elements like radio buttons and checkbox lists. Attractive styling. Form elements in the block add and edit dialogs will better adhere to concrete5 design guidelines when they are output using the core form helpers. Do more with less. Once you learn the syntax, writing forms using these helpers can save you a lot of time and code. Loading the Helper You can load the concrete5 form helper using the following simple code $app = \\Concrete\\Core\\Support\\Facade\\Application::getFacadeApplication(); $form = $app-&gt;make('helper\/form'); The $form variable now contains an instance of the FormHelper class. Arguments While each form helper function ultimately displays a different HTML tag, most take common arguments. Here is their explanation: $name Name of the field. Oftentimes will set the ID of the field to the same valueOrMiscFields. $valueOrMiscFields Initial field valueOrMiscFields. Typically optional. $miscFields An associative array of additional attributes to be added to the input element. (e.g. array('style' =&gt; 'width: 100%')). $additionalClasses A string of additional classes to be added to the class attribute on the tag. Note: In most cases, only the $name of the field is a required function argument. Other items are optional. Additionally, if the $valueOrMiscFields is left blank, the $miscFields field can usually be specified as the second argument to the helper. Methods $form-&gt;hidden($name, $valueOrMiscFields) Creates a hidden form element. $form-&gt;label($name, $valueOrMiscFields) Creates a label for a form element. The $name parameter must match the $name of another form element. $form-&gt;text($name, $valueOrMiscFields, $miscFields) Creates a text input element. $form-&gt;number($name, $valueOrMiscFields, $miscFields) Creates a number input element. $form-&gt;email($name, $valueOrMiscFields, $miscFields) Creates an email input element. $form-&gt;telephone($name, $valueOrMiscFields, $miscFields) Creates a telephone input element. $form-&gt;url($name, $valueOrMiscFields, $miscFields) Creates a url input element. $form-&gt;password($name, $valueOrMiscFields, $tagAttribute) Outputs a password field. $form-&gt;textarea($name, $valueOrMiscFields, $miscFields) Outputs a textarea form element. $form-&gt;select($name, $optionValues, $valueOrMiscFields, $miscFields) Outputs a select menu. The $options argument is a PHP array. The keys of the array will be used as the select option valueOrMiscFieldss, while the array valueOrMiscFieldss will be displayed in the menu. The $valueOrMiscFields parameter controls the initially checked select element. $form-&gt;selectCountry($key, $selectedCountryCode, $configuration = [], $miscFields = []) Renders a select menu to choose a Country. @param string $key The name of the element. If $key denotes an array, the ID will start with $key but will have a progressive unique number added; if $key does not denotes an array, the ID attribute will be $key. @param string $selectedCountryCode the code of the Country to be initially selected @param array $configuration Configuration options. Supported keys are: 'required': users must choose a Country? 'allowedCountries': an array containing a list of acceptable Country codes. If not set, all the countries will be selectable. 'linkStateProvinceField': set to true to look for text fields that have a &quot;data-countryfield&quot; attribute with the same valueOrMiscFields as this Country field name (updating the Country select will automatically update the State\/Province list). @param array $miscFields Additional fields appended to the element (a hash array of attributes name =&gt; valueOrMiscFields), possibly including 'class' $form-&gt;checkbox($name, $value, $isChecked, $miscFields) Outputs a checkbox. The $isChecked boolean controls whether the checkbox is initially checked or not. $form-&gt;radio($name, $value, $checkedValueOrMiscFields, $miscFields) Outputs a radio button. The $buttonValue argument controls the valueOrMiscFields of this particular radio button. The second $valueOrMiscFields argument contains the initial valueOrMiscFields we wish to check, in a series of radio buttons. $form-&gt;file($name, $tagAttribute) Outputs a file upload field. $form-&gt;submit($name, $valueOrMiscFields, $miscFields, $additionalClasses) Outputs an input type=&quot;submit&quot;. $form-&gt;button($name, $valueOrMiscFields, $miscFields, $additionalClasses) Outputs an input type=&quot;button&quot;.","tags":"","url":"Forms\/Standard_Widgets.html"},{"title":"Concrete5 Widgets","text":"In addition to standard form widgets, concrete5 provides a myriad of other widgets for linking to pages, selecting pages, selecting users, working with dates, and much much more. In addition to providing widgets that would otherwise take your hours to code yourself. Data persistence on POST: when submitting the core form helpers, their data will remain as originally entered, without having to worry about checking $_REQUEST variables. Do more with less. Once you learn the syntax, writing forms using these helpers can save you a lot of time and code. Calendar Event Selector Color Picker Date Time","tags":"","url":"Forms\/Concrete5_Widgets\/index.html"},{"title":"Calendar Event Selector","text":"Loading The Helper $app = \\Concrete\\Core\\Support\\Facade\\Application::getFacadeApplication(); $af = $app-&gt;make('helper\/form\/calendar_event_selector'); Usage $af-&gt;selectEvent($calendar, $fieldName, $eventID = false); @param object $calendar - Calendar object. @param string $fieldName - Form field name. @param int $eventID - Selected eventID","tags":"","url":"Forms\/Concrete5_Widgets\/Calendar_Event_Selector.html"},{"title":"Captcha","text":"Loading The Helper $app = \\Concrete\\Core\\Support\\Facade\\Application::getFacadeApplication(); $captcha = $app-&gt;make('helper\/form\/captcha'); The captcha helper lets you integrate an image-based captcha into your forms, to help prevent spam. Uses the third party SecureImage library. Usage $captcha-&gt;display() Displays a dynamically generated image, for use with the captcha input text field. $captcha-&gt;showInput() Creates the text field for that instance of the captcha. This text input element automatically has the name &quot;ccmCaptchaCode&quot; $captcha-&gt;check($field = 'ccmCaptchaCode') Automatically checks the request array for the passed $field. Returns true if the field contains the same text as the current instance of the captcha, false if the captcha has been failed.","tags":"","url":"Forms\/Concrete5_Widgets\/Captcha.html"},{"title":"Color Picker","text":"Loading The Helper $app = \\Concrete\\Core\\Support\\Facade\\Application::getFacadeApplication(); $af = $app-&gt;make('helper\/form\/color'); Usage $af-&gt;output($inputName, $value = null, $options = array()); @param string $name - Form field name. @param string $value - Selected hex color. @param array $options - ??? Not sure what can go in here","tags":"","url":"Forms\/Concrete5_Widgets\/Color_Picker.html"},{"title":"Date Time","text":"Loading The Helper $app = \\Concrete\\Core\\Support\\Facade\\Application::getFacadeApplication(); $dtt = $app-&gt;make('helper\/form\/date_time'); The $dtt Object is now an instance of DateTimeHelper. This helper provides a calendar and an optional time dropdown selector. Useful for selecting dates and date\/time combinations. Usage $dtt-&gt;date($field, $value = null, $calendarAutoStart = true, array $datePickerOptions = array()); @param string $field The field name (will be used as $field parameter in the translate method) @param \\DateTime|string $value The initial value @param bool $calendarAutoStart Set to false to avoid initializing the Javascript calendar @param array $datePickerOptions datepicker properties, see jquery-ui datepicker docs Creates form fields and JavaScript calendar includes for a particular item but includes only calendar controls (no time, so no time-zone conversions will be applied). $dtt-&gt;datetime($field, $value = null, $includeActivation = false, $calendarAutoStart = true, $classes = null, $timeResolution = 60, array $datePickerOptions = array()); @param string $field The field prefix (will be used as $field parameter in the translate method) @param \\DateTime|string $value The initial value @param bool $includeActivation Set to true to include a checkbox to enable\/disable the date\/time fields @param bool $calendarAutoStart Set to false to avoid initializing the Javascript calendar @param string $classes A list of space-separated classes to add to the ui-datepicker-div container @param int $timeResolution The time resolution in seconds (60 means we won't ask seconds) @param array $datePickerOptions datepicker properties, see jquery-ui datepicker docs Creates form fields and JavaScript calendar includes for a particular item (date\/time string representations will be converted from the user system-zone to the time-zone). $dtt-&gt;translate($field, $arr = null, $asDateTime = false); @param string $field The name of the field to translate @param array $arr The array containing the value. If null (default) we'll use $_POST @param bool $asDateTime Set to true to get a DateTime object, false (default) for a string representation Takes a &quot;field&quot; and grabs all the corresponding disparate fields from $_POST and translates into a timestamp. If $field has both date and time, the resulting value will be converted from the user timezone to the system timezone. If $field has only date and not time, no timezone conversion will occur.","tags":"","url":"Forms\/Concrete5_Widgets\/Date_Time.html"},{"title":"Page Selector","text":"Loading The Helper Provides an easy way to select a page from a combination sitemap\/search form. Saves a numeric page ID to a hidden form element. $app = \\Concrete\\Core\\Support\\Facade\\Application::getFacadeApplication(); $pageSelector = $app-&gt;make('helper\/form\/page_selector'); Usage $pageSelector-&gt;selectPage($fieldName, $cID = false); @param string $fieldName The field name @param bool|int $cID The ID of the already selected page Creates form fields and JavaScript page chooser for choosing a page. For use with inclusion in blocks. $pageSelector-&gt;selectMultipleFromSitemap($field, $pages = array(), $startingPoint = 'HOME_CID', $filters = array()); @param string $field The field name @param array $pages An array of IDs of the already selected pages @param int $startingPoint Page ID of the parent page for displaying the sitemap @param array $filters - ??? Not sure what can go in here","tags":"","url":"Forms\/Concrete5_Widgets\/Page_Selector.html"},{"title":"Rating","text":"Loading The Helper $app = \\Concrete\\Core\\Support\\Facade\\Application::getFacadeApplication(); $rt = $app-&gt;make('helper\/form\/rating'); Usage $rt-&gt;rating($name, $value = null, $includeJS = true); @param string $name - The field name @param string $value - The selected value @param boolean $includeJS - Should this include javascript","tags":"","url":"Forms\/Concrete5_Widgets\/Rating.html"},{"title":"User Selector","text":"Loading The Helper Provides an interface for selecting a single or multiple users. Saves to a hidden form element. $app = \\Concrete\\Core\\Support\\Facade\\Application::getFacadeApplication(); $uh = $app-&gt;make('helper\/form\/user_selector'); Usage $uh-&gt;selectUser($fieldName, $uID = false); @param string $fieldName - the field name @param bool|int $uID - the ID of the user to be initially selected Build the HTML to be placed in a page to choose a user using a popup dialog. $uh-&gt;quickSelect($fieldName, $uID = false, $miscFields = []); @param string $fieldName - the name of the field @param int|false $uID - the ID of the user to be initially selected @param array $miscFields - additional fields appended to the hidden input element (a hash array of attributes name =&gt; value), possibly including 'class' Build the HTML to be placed in a page to choose a user using a select with users pupulated dynamically with ajax requests. $uh-&gt;selectMultipleUsers($field, $pages = array(), $startingPoint = 'HOME_CID', $filters = array()); @param string $field - the field name @param array $pages - an array of IDs of the already selected pages @param int $startingPoint - page ID of the parent page for displaying the sitemap @param array $filters - ??? Not sure what can go in here Build the HTML to be placed in a page to choose multiple users using a popup dialog.","tags":"","url":"Forms\/Concrete5_Widgets\/User_Selector.html"},{"title":"JSON","text":"","tags":"","url":"Helpers\/JSON.html"},{"title":"Navigation","text":"","tags":"","url":"Helpers\/Navigation.html"},{"title":"Text","text":"","tags":"","url":"Helpers\/Text.html"},{"title":"Overview","text":"Accessible through the system section of the dashboard, jobs are ways of automating certain processes available to concrete5. These jobs can be run from the dashboard, or easily cronned and run from the server at specified intervals. Creating Your Own Job Creating your own job is as simple as creating a new class in the Job format, and adding it to the application\/jobs\/ directory in your local web root. This job will then appear on the Jobs page in your site's dashboard, can then be installed and run easily. Create the File In your local application\/jobs\/ directory, create a file in the typical concrete5 handle format. (all lowercase, with underscores separating spaces. e.g. &quot;job_handle.php&quot;) Create a class in this file Within this file, take the name of your file (minus .php) and camelcase it, and use that as your job's class name, while extending the \\Concrete\\Core\\Job\\Job class. class JobHandle extends \\Concrete\\Core\\Job\\Job Specify the Job name and description Within this file, define the method getJobName() and getJobDescription(), with each returning the relevant piece of information about the job. Define the run() function Inside a run() function of your Job, define whatever programming logic you wish to execute when the Job is run. Setup error handling and output Within your run() method, handle errors by using the throw() method and native PHP exception support. Any exceptions that occur within your job will cease the job from running and be reported to the administrator when they next visit the Jobs page in the dashboard. If you would like to return custom output for the status of your job, simply return a string from your run() method. Installing a Job with a Package Addon developers may install Jobs with their packages. To do this, simply include the job file in a jobs\/ directory within the package, and execute the following code from within your package's install() command: Job::installByPackage('job_handle', $pkg); Any jobs installed in this way will automatically be removed if your package is uninstalled. Full Job Example File is: \/packages\/package_name\/jobs\/job_handle.php &lt;?php namespace Concrete\\Package\\PackageName\\Job; class JobHandle extends \\Concrete\\Core\\Job\\Job { public function getJobName() { return t(&quot;Job Name&quot;); } public function getJobDescription() { return t(&quot;Job Description&quot;); } public function run() { \/\/do the functions of the job } }","tags":"","url":"Jobs\/Overview.html"},{"title":"Job Sets","text":"Jobs can be separated into sets in order to run different jobs at different times using a Cron. $jobSet = Concrete\\Core\\Job\\Set::getByID($id); Get the job set by the job set ID. $jobSet = Concrete\\Core\\Job\\Set::getByName($name); Get the job set by the job set Name. $defaultSet = Concrete\\Core\\Job\\Set::getDefault(); Get the Default job set. $jobSet-&gt;getJobSetID(); Get the job set id $jobSet-&gt;getJobSetName(); Get the job set name $jobSet-&gt;getPackageID(); Get the job set package id $jobSet-&gt;getJobSetDisplayName(); Get the job set display name $jobList = $jobSet-&gt;getList(); Get the list of jobs in this job set.","tags":"","url":"Jobs\/Job_Sets.html"},{"title":"Logging","text":"In concrete5, logging something so that it appears in the Dashboard can be as simple as a single line. \\Log::addInfo('This is an informative message'); \\Log::addWarning('Uh oh.'); \\Log::addAlert('Red alert!'); Log::addDebug('This is a debug level.'); This is using the Log facade, which is a static class in the root namespace that automatically instantiates the Concrete\\Core\\Logging\\Logger class with its dependencies. If you import the Log class at the top of your file, you don't have to use the backslash: Severity concrete5's logger implements PSR-3, and is built on the Monolog library. That means it supports the following severities (which are listed here in escalating order.) Debug Info Notice Warning Error Critical Alert Emergency To log a message with a particular severity, simply call Log::addSeverity, concrete5 makes it easy to search by severity in the Dashboard. Logging Objects Need to log an object using the logger? You'll need to change it into a string first. Here's an example of logging the data about Concrete\\Core\\User\\UserInfo object: $ui = \\UserInfo::getByID(1); \\Log::addInfo('Information about the admin user: ' . var_dump_safe($ui, $false)); Why var_dump_safe? Some objects in concrete5 are built from Doctrine ORM, which is a library that makes it easy to work with database data. These objects are extremely large; if you attempt to run a normal var_dump or print_r on them, they will die and possibly crash your PHP session. Instead, use the concrete5-specific var_dump_safe method, with the $echo argument (the second argument) set to false.","tags":"","url":"Logging.html"},{"title":"Mail","text":"","tags":"","url":"Mail.html"},{"title":"Pages","text":"","tags":"","url":"Pages\/index.html"},{"title":"Overview","text":"","tags":"","url":"Pages\/Overview.html"},{"title":"Listing & Searching","text":"","tags":"","url":"Pages\/Listing_&_Searching.html"},{"title":"Single Pages","text":"","tags":"","url":"Pages\/Single_Pages.html"},{"title":"Page Types","text":"","tags":"","url":"Pages\/Page_Types.html"}]}